execute pathogen#infect()
filetype plugin on

" Nerd Tree
map <C-e> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:NERDTreeDirArrows=0
let NERDTreeIgnore = ['node_modules','bower_components', '.git', 'npm-debug.log', 'elm-stuff']
"switch between nerdtree and file
execute "set <M-h>=\eh"
nnoremap <M-h> <C-w>h
execute "set <M-l>=\el"
nnoremap <M-l> <C-w>l

" expansions
inoremap {<Tab> {}<Left>
inoremap {<Tab><Tab> {<CR>}<Esc>O<Tab>
inoremap [<Tab> []<Left>
inoremap [<Tab><Tab> [<CR>]<Esc>O<Tab>
inoremap (<Tab> ()<Left>
inoremap (<Tab><Tab> (<CR>)<Esc>O<Tab>
inoremap <C-u> <Esc>O<Tab>
inoremap <C-h> <Esc>jA
"inoremap fn( function(
"inoremap fn<Space> function<Space>
nnoremap <Leader>j <C-w>lL10j<C-w>h
nnoremap <Leader>k <C-w>lK10k<C-w>h

" for window navigation on chromebook
map <C-A-w> <C-w>

" Persistent Undo
set undofile 
set undodir=~/.vim/undodir

" preferences
set tabstop=2
set softtabstop=2
set expandtab
set autoindent
set nu
set shiftwidth=2
set noswapfile
" don't skip line breaks when going up or down
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" File Navigation
nnoremap ,o 0f'<Right>vf'<Left>y:e <C-R>"
nnoremap ,j :ls<CR>:b
nnoremap ,f :NERDTreeFind<CR><C-w>l
execute "set <M-n>=\en"
noremap <M-n> :bn<CR>
execute "set <M-p>=\ep"
noremap <M-p> :bp<CR>
nnoremap <Down> L5j
nnoremap <Up> H5k
nnoremap <Left> :bp<CR>
nnoremap <Right> :bn<CR>

let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'

if exists('+autochdir')
    set autochdir
else
    autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /
endif

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let vimDir = '$HOME/.vim'
    let &runtimepath.=','.vimDir
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif
au BufRead,BufNewFile *.css setfiletype scss
if (has("autocmd"))
  au BufReadPost * if line("'\"") > 1 && line("'\"") < line("$") | exe "normal! g'\"" | endif
endif
"au BufRead,BufNewFile NERD_tree_1 


" set colors
syntax on
if !has("gui_running")
    set term=xterm
    set t_Co=256
    set t_ut=
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"
    colorscheme solarized
    set background=light
endif
set backspace=indent,eol,start

nnoremap ,q <Esc>:q<CR>
nnoremap <C-Up> <C-w><Right>H8k<C-w><Left>
nnoremap <C-Down> <C-w><Right>L8j<C-w><Left>
" Send more characters for redraws
set ttyfast

" Enable mouse use in all modes
set mouse=v

" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
set ttymouse=xterm2
call pathogen#helptags()


set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 1
let g:elm_syntastic_show_warnings = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1


let g:elm_jump_to_error = 1
let g:elm_make_show_warnings = 0
let g:elm_detailed_complete = 1
let g:elm_format_autosave = 1
let g:elm_format_fail_silently = 1
let g:elm_format_two_spaces = 1
let g:elm_setup_keybindings = 1
let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': [],'passive_filetypes': [] }
"nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>"
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
inoremap kj <Esc>

nnoremap ,n :set nopaste<CR>
nnoremap ,p :set paste<CR>

nnoremap <C-a> <C-w>
nnoremap "*p :r !cat /home/zane/.crouton-clipboard/data.txt<CR>
vnoremap "*y :'<,'>w! /home/zane/.crouton-clipboard/data.txt<CR>

function! Train() 
  call system("echo 'port module Training exposing (..)\n\nimport Html exposing (..)\nimport Html.App exposing (beginnerProgram)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\n\nmain : Program Never\nmain =\n  ' > ".expand("%"))
  silent! e!
  silent! SyntasticReset
  $
  normal! A
  startinsert
  normal! l
  call cursor( line('.'), col('.') + 1)
  echo ''
endfunction
command! Train call Train()
nnoremap ,t :SyntasticToggleMode<cr>
